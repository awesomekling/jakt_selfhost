extern struct StringBuilder {
    function append(mutable this, anonymous s: u8)
    function to_string(mutable this) -> String
    function StringBuilder() -> StringBuilder
}

// FIXME: These should not need explicit "-> bool" return types.
function is_ascii_alpha(anonymous c: u8) -> bool => (c >= b'a' and c <= b'z') or (c >= b'A' and c <= b'Z')
function is_ascii_digit(anonymous c: u8) -> bool => (c >= b'0' and c <= b'9')
function is_ascii_hexdigit(anonymous c: u8) -> bool => (c >= b'0' and c <= b'9') or (c >= b'a' and c <= b'f') or (c >= b'A' and c <= b'F')
function is_ascii_alphanumeric(anonymous c: u8) -> bool => is_ascii_alpha(c) or is_ascii_digit(c)

//FIXME: Would be nice to name this Span and not have conflict
struct JaktSpan {
    start: usize
    end: usize
}

enum Token {
    SingleQuotedString(quote: String, span: JaktSpan)
    SingleQuotedByteString(quote: String, span: JaktSpan)
    QuotedString(quote: String, span: JaktSpan)
    Number(number: i64, span: JaktSpan)
    Name(name: String, span: JaktSpan)
    Semicolon(JaktSpan)
    Colon(JaktSpan)
    ColonColon(JaktSpan)
    LParen(JaktSpan)
    RParen(JaktSpan)
    LCurly(JaktSpan)
    RCurly(JaktSpan)
    LSquare(JaktSpan)
    RSquare(JaktSpan)
    PercentSign(JaktSpan)
    Plus(JaktSpan)
    Minus(JaktSpan)
    Equal(JaktSpan)
    PlusEqual(JaktSpan)
    PlusPlus(JaktSpan)
    MinusEqual(JaktSpan)
    MinusMinus(JaktSpan)
    AsteriskEqual(JaktSpan)
    ForwardSlashEqual(JaktSpan)
    PercentSignEqual(JaktSpan)
    NotEqual(JaktSpan)
    DoubleEqual(JaktSpan)
    GreaterThan(JaktSpan)
    GreaterThanOrEqual(JaktSpan)
    LessThan(JaktSpan)
    LessThanOrEqual(JaktSpan)
    LeftArithmeticShift(JaktSpan)
    LeftShift(JaktSpan)
    LeftShiftEqual(JaktSpan)
    RightShift(JaktSpan)
    RightArithmeticShift(JaktSpan)
    RightShiftEqual(JaktSpan)
    Asterisk(JaktSpan)
    Ampersand(JaktSpan)
    AmpersandEqual(JaktSpan)
    Pipe(JaktSpan)
    PipeEqual(JaktSpan)
    Caret(JaktSpan)
    CaretEqual(JaktSpan)
    Dollar(JaktSpan)
    Tilde(JaktSpan)
    ForwardSlash(JaktSpan)
    ExclamationPoint(JaktSpan)
    QuestionMark(JaktSpan)
    QuestionMarkQuestionMark(JaktSpan)
    Comma(JaktSpan)
    Dot(JaktSpan)
    DotDot(JaktSpan)
    Eol(JaktSpan)
    Eof(JaktSpan)
    FatArrow(JaktSpan)
    Garbage(JaktSpan)
    None
}

struct JaktError {
    msg: String
    span: JaktSpan
}

struct Lexer {
    index: usize
    input: [u8]
    errors: [JaktError]

    function lex_number_or_name(mutable this) throws -> Token {
        let start = $index

        if $index >= $input.size() {
            $errors.push(JaktError(msg: "unexpected eof", span: JaktSpan(start, end: start)))
            return Token::Garbage(JaktSpan(start, end: start))
        }
        if is_ascii_digit($input[$index]) {
            let mutable total = 0i64

            while $index < $input.size() and is_ascii_digit($input[$index]) {
                let value = $input[$index]
                ++$index
                let digit: i64 = as_saturated(value - b'0')
                total = total * 10 + digit
            }
            let end = $index
            return Token::Number(number: total, span: JaktSpan(start, end))
        } else if is_ascii_alpha($input[$index]) or $input[$index] == b'_' {
            let mutable string_builder = StringBuilder()

            while $index < $input.size() and (is_ascii_alphanumeric($input[$index]) or $input[$index] == b'_') {
                let value = $input[$index]
                ++$index
                string_builder.append(value)
            }
            let end = $index
            return Token::Name(name: string_builder.to_string(), span: JaktSpan(start, end))
        }

        let unknown_char = $input[$index]
        let end = ++$index
        $errors.push(JaktError(msg: format("unknown character: {:c}", unknown_char), span: JaktSpan(start, end)))
        return Token::Garbage(JaktSpan(start, end))
    }

    function lex_quoted_string(mutable this, delimiter: u8) throws  -> Token {
        let start = $index

        ++$index

        if $index >= $input.size() {
            $errors.push(JaktError(msg: "unexpected eof", span: JaktSpan(start, end: start)))
            return Token::Garbage(JaktSpan(start, end: start))
        }

        let mutable string_builder = StringBuilder()
        
        let mutable escaped = false
        while $index < $input.size() and $input[$index] != delimiter and escaped == false {
            if $input[$index] == b'\\' {
                escaped = true
            } else {
                escaped = false
            }
            ++$index
        }

        let end = $index
        
        if delimiter == b'\'' {
            //FIXME: JaktError? can not be assigned 'None'
            return Token::SingleQuotedString(quote: string_builder.to_string(), span: JaktSpan(start, end))
        }

        return Token::QuotedString(quote: string_builder.to_string(), span: JaktSpan(start, end))
    }

    function next(mutable this) throws  -> Token? {
        if $index == $input.size() {
            return None
        }

        while $index < $input.size() and $input[$index] == b' ' {
            ++$index
        }

        let start = $index

        let x = match $input[$index] {
            (b'(') => Token::LParen(JaktSpan(start, end: ++$index))
            (b')') => Token::RParen(JaktSpan(start, end: ++$index))
            (b'[') => Token::LSquare(JaktSpan(start, end: ++$index))
            (b']') => Token::RSquare(JaktSpan(start, end: ++$index))
            (b'{') => Token::LCurly(JaktSpan(start, end: ++$index))
            (b'}') => Token::RCurly(JaktSpan(start, end: ++$index))
            (b'<') => Token::LessThan(JaktSpan(start, end: ++$index))
            (b'>') => Token::GreaterThan(JaktSpan(start, end: ++$index))
            (b'.') => Token::Dot(JaktSpan(start, end: ++$index))
            (b',') => Token::Comma(JaktSpan(start, end: ++$index))
            (b':') => Token::Colon(JaktSpan(start, end: ++$index))
            (b'?') => Token::QuestionMark(JaktSpan(start, end: ++$index))
            (b'+') => Token::Plus(JaktSpan(start, end: ++$index))
            (b'-') => Token::Minus(JaktSpan(start, end: ++$index))
            (b'*') => Token::Asterisk(JaktSpan(start, end: ++$index))
            (b'/') => Token::ForwardSlash(JaktSpan(start, end: ++$index))
            (b'$') => Token::Dollar(JaktSpan(start, end: ++$index))
            (b'=') => Token::Equal(JaktSpan(start, end: ++$index))
            (b'\n') => Token::Eol(JaktSpan(start, end: ++$index))
            (b'\'') => this.lex_quoted_string(delimiter: b'\'')                
            (b'\"') => this.lex_quoted_string(delimiter: b'"')
            else => this.lex_number_or_name()
        }
        return x
    }
}

function print_error(input: [u8], error: JaktError) {
    println("Error: {}", error.msg)
    println("------")
    for index in 0..input.size() {
        if index >= error.span.start and index < error.span.end {
            print("\u001b[31m")
        } else {
            print("\u001b[0m")
        }
        print("{:c}", input[index])
    }
    println("------")

}

function main(args: [String]) {
    if args.size() <= 1 {
        eprintln("usage: jakt <path>")
        return 1
    }

    let mutable file = File::open_for_reading(args[1])
    let input = file.read_all()

    let mutable lexer = Lexer(index: 0, input, errors: [])
    
    for token in lexer {
        println("token: {}", token)
    }

    for error in lexer.errors.iterator() {
        print_error(input, error)
    }
}